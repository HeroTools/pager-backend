AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]

  StackName:
    Type: String
    Default: pager-webhooks
    AllowedValues: [pager-webhooks]

  DeploymentVersion:
    Type: String
    Default: '1.0.0'
    Description: 'Change this value to force function updates'

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        DEPLOYMENT_VERSION: !Ref DeploymentVersion
        SUPABASE_ANON_KEY: '***REDACTED_SUPABASE_ANON_KEY***'
        SUPABASE_SERVICE_ROLE_KEY: '***REDACTED_SUPABASE_SERVICE_KEY***'
        SUPABASE_URL: '***REDACTED_SUPABASE_URL***'
        PG_USER: '***REDACTED_PG_USER***'
        PG_HOST: '***REDACTED_PG_HOST***'
        PG_DATABASE: 'postgres'
        PG_PASSWORD: '***REDACTED_PG_PASSWORD***'
        PG_PORT: '6543'

Resources:
  WebhookApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref Environment
      Name: !Sub 'pager-webhooks-${Environment}'
      CorsConfiguration:
        AllowMethods: [POST, GET, OPTIONS, PATCH, DELETE]
        AllowHeaders:
          [
            Content-Type,
            X-Pager-Signature,
            X-Pager-Request-Timestamp,
            X-Api-Key,
            X-Amz-Date,
            X-Amz-Security-Token,
            X-Workspace-Id,
            Authorization,
          ]
        AllowOrigins: ['*']

  WebhookQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub 'pager-webhooks-${Environment}.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true
      VisibilityTimeout: 60
      MessageRetentionPeriod: 1209600

  # Custom Webhook Handler (original)
  CustomWebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'pager-custom-webhook-handler-${Environment}'
      CodeUri: src/handlers
      Handler: webhook-handler.handler
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          ENVIRONMENT: !Ref Environment
          WEBHOOK_QUEUE_URL: !Ref WebhookQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WebhookQueue.QueueName
      Events:
        CustomWebhookPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WebhookApi
            Path: /webhooks/custom/{webhookId}
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2024
        EntryPoints:
          - webhook-handler.ts

  # GitHub Webhook Handler
  GitHubWebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'pager-github-webhook-handler-${Environment}'
      CodeUri: src/handlers
      Handler: github-webhook-handler.handler
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          ENVIRONMENT: !Ref Environment
          WEBHOOK_QUEUE_URL: !Ref WebhookQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WebhookQueue.QueueName
      Events:
        GitHubWebhookPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WebhookApi
            Path: /webhooks/github/{webhookId}
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2024
        EntryPoints:
          - github-webhook-handler.ts

  # Linear Webhook Handler
  LinearWebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'pager-linear-webhook-handler-${Environment}'
      CodeUri: src/handlers
      Handler: linear-webhook-handler.handler
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          ENVIRONMENT: !Ref Environment
          WEBHOOK_QUEUE_URL: !Ref WebhookQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WebhookQueue.QueueName
      Events:
        LinearWebhookPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WebhookApi
            Path: /webhooks/linear/{webhookId}
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2024
        EntryPoints:
          - linear-webhook-handler.ts

  # Jira Webhook Handler
  JiraWebhookHandler:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'pager-jira-webhook-handler-${Environment}'
      CodeUri: src/handlers
      Handler: jira-webhook-handler.handler
      Environment:
        Variables:
          AWS_REGION_NAME: !Ref AWS::Region
          ENVIRONMENT: !Ref Environment
          WEBHOOK_QUEUE_URL: !Ref WebhookQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt WebhookQueue.QueueName
      Events:
        JiraWebhookPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref WebhookApi
            Path: /webhooks/jira/{webhookId}
            Method: POST
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2024
        EntryPoints:
          - jira-webhook-handler.ts

  MessageProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'pager-message-processor-${Environment}'
      CodeUri: src/processors
      Handler: message-processor.handler
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt WebhookQueue.QueueName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WebhookQueue.Arn
            BatchSize: 5
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2024
        EntryPoints:
          - message-processor.ts

Outputs:
  WebhookApiUrl:
    Description: 'Webhook API URL'
    Value: !Sub 'https://${WebhookApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: webhook-api-url

  QueueUrl:
    Description: 'Webhook processing queue URL'
    Value: !Ref WebhookQueue
