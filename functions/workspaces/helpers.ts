const localList: string[] = [
  'ahole',
  'anus',
  'ash0le',
  'ash0les',
  'asholes',
  'ass',
  'Ass Monkey',
  'Assface',
  'assh0le',
  'assh0lez',
  'asshole',
  'assholes',
  'assholz',
  'asswipe',
  'azzhole',
  'bassterds',
  'bastard',
  'bastards',
  'bastardz',
  'basterds',
  'basterdz',
  'Biatch',
  'bitch',
  'bitches',
  'Blow Job',
  'boffing',
  'butthole',
  'buttwipe',
  'c0ck',
  'c0cks',
  'c0k',
  'Carpet Muncher',
  'cawk',
  'cawks',
  'Clit',
  'cnts',
  'cntz',
  'cock',
  'cockhead',
  'cock-head',
  'cocks',
  'CockSucker',
  'cock-sucker',
  'crap',
  'cum',
  'cunt',
  'cunts',
  'cuntz',
  'dick',
  'dild0',
  'dild0s',
  'dildo',
  'dildos',
  'dilld0',
  'dilld0s',
  'dominatricks',
  'dominatrics',
  'dominatrix',
  'dyke',
  'enema',
  'f u c k',
  'f u c k e r',
  'fag',
  'fag1t',
  'faget',
  'fagg1t',
  'faggit',
  'faggot',
  'fagg0t',
  'fagit',
  'fags',
  'fagz',
  'faig',
  'faigs',
  'fart',
  'flipping the bird',
  'fuck',
  'fucker',
  'fuckin',
  'fucking',
  'fucks',
  'Fudge Packer',
  'fuk',
  'Fukah',
  'Fuken',
  'fuker',
  'Fukin',
  'Fukk',
  'Fukkah',
  'Fukken',
  'Fukker',
  'Fukkin',
  'g00k',
  'God-damned',
  'h00r',
  'h0ar',
  'h0re',
  'hells',
  'hoar',
  'hoor',
  'hoore',
  'jackoff',
  'jap',
  'japs',
  'jerk-off',
  'jisim',
  'jiss',
  'jizm',
  'jizz',
  'knob',
  'knobs',
  'knobz',
  'kunt',
  'kunts',
  'kuntz',
  'Lezzian',
  'Lipshits',
  'Lipshitz',
  'masochist',
  'masokist',
  'massterbait',
  'masstrbait',
  'masstrbate',
  'masterbaiter',
  'masterbate',
  'masterbates',
  'Motha Fucker',
  'Motha Fuker',
  'Motha Fukkah',
  'Motha Fukker',
  'Mother Fucker',
  'Mother Fukah',
  'Mother Fuker',
  'Mother Fukkah',
  'Mother Fukker',
  'mother-fucker',
  'Mutha Fucker',
  'Mutha Fukah',
  'Mutha Fuker',
  'Mutha Fukkah',
  'Mutha Fukker',
  'n1gr',
  'nastt',
  'nigger;',
  'nigur;',
  'niiger;',
  'niigr;',
  'orafis',
  'orgasim;',
  'orgasm',
  'orgasum',
  'oriface',
  'orifice',
  'orifiss',
  'packi',
  'packie',
  'packy',
  'paki',
  'pakie',
  'paky',
  'pecker',
  'peeenus',
  'peeenusss',
  'peenus',
  'peinus',
  'pen1s',
  'penas',
  'penis',
  'penis-breath',
  'penus',
  'penuus',
  'Phuc',
  'Phuck',
  'Phuk',
  'Phuker',
  'Phukker',
  'polac',
  'polack',
  'polak',
  'Poonani',
  'pr1c',
  'pr1ck',
  'pr1k',
  'pusse',
  'pussee',
  'pussy',
  'puuke',
  'puuker',
  'recktum',
  'rectum',
  'retard',
  'sadist',
  'scank',
  'schlong',
  'screwing',
  'semen',
  'sex',
  'sexy',
  'Sh!t',
  'sh1t',
  'sh1ter',
  'sh1ts',
  'sh1tter',
  'sh1tz',
  'shit',
  'shits',
  'shitter',
  'Shitty',
  'Shity',
  'shitz',
  'Shyt',
  'Shyte',
  'Shytty',
  'Shyty',
  'skanck',
  'skank',
  'skankee',
  'skankey',
  'skanks',
  'Skanky',
  'slag',
  'slut',
  'sluts',
  'Slutty',
  'slutz',
  'son-of-a-bitch',
  'tit',
  'turd',
  'va1jina',
  'vag1na',
  'vagiina',
  'vagina',
  'vaj1na',
  'vajina',
  'vullva',
  'vulva',
  'w0p',
  'wh00r',
  'wh0re',
  'whore',
  'xrated',
  'xxx',
  'b!+ch',
  'bitch',
  'blowjob',
  'clit',
  'arschloch',
  'fuck',
  'shit',
  'ass',
  'asshole',
  'b!tch',
  'b17ch',
  'b1tch',
  'bastard',
  'bi+ch',
  'boiolas',
  'buceta',
  'c0ck',
  'cawk',
  'chink',
  'cipa',
  'clits',
  'cock',
  'cum',
  'cunt',
  'dildo',
  'dirsa',
  'ejakulate',
  'fatass',
  'fcuk',
  'fuk',
  'fux0r',
  'hoer',
  'hore',
  'jism',
  'kawk',
  'l3itch',
  'l3i+ch',
  'masturbate',
  'masterbat*',
  'masterbat3',
  'motherfucker',
  's.o.b.',
  'mofo',
  'nazi',
  'nigga',
  'nigger',
  'nutsack',
  'phuck',
  'pimpis',
  'pusse',
  'pussy',
  'scrotum',
  'sh!t*',
  'shemale',
  'shi+',
  'sh!+',
  'slut',
  'smut',
  'teets',
  'tits',
  'boobs',
  'b00bs',
  'teez',
  'testical',
  'testicle',
  'titt',
  'w00se',
  'jackoff',
  'wank',
  'whoar',
  'whore',
  '*damn',
  '*dyke',
  '*fuck*',
  '*shit*',
  '@$$',
  'amcik',
  'andskota',
  'arse*',
  'assrammer',
  'ayir',
  'bi7ch',
  'bitch*',
  'bollock*',
  'breasts',
  'butt-pirate',
  'cabron',
  'cazzo',
  'chraa',
  'chuj',
  'Cock*',
  'cunt*',
  'd4mn',
  'daygo',
  'dego',
  'dick*',
  'dike*',
  'dupa',
  'dziwka',
  'ejackulate',
  'Ekrem*',
  'Ekto',
  'enculer',
  'faen',
  'fag*',
  'fanculo',
  'fanny',
  'feces',
  'feg',
  'Felcher',
  'ficken',
  'fitt*',
  'Flikker',
  'foreskin',
  'Fotze',
  'Fu(*',
  'fuk*',
  'futkretzn',
  'gook',
  'guiena',
  'h0r',
  'h4x0r',
  'hell',
  'helvete',
  'hoer*',
  'honkey',
  'Huevon',
  'hui',
  'injun',
  'jizz',
  'kanker*',
  'kike',
  'klootzak',
  'kraut',
  'knulle',
  'kuk',
  'kuksuger',
  'Kurac',
  'kurwa',
  'kusi*',
  'kyrpa*',
  'lesbo',
  'mamhoon',
  'masturbat*',
  'merd*',
  'mibun',
  'monkleigh',
  'mouliewop',
  'muie',
  'mulkku',
  'muschi',
  'nazis',
  'nepesaurio',
  'nigger*',
  'orospu',
  'paska*',
  'perse',
  'picka',
  'pierdol*',
  'pillu*',
  'pimmel',
  'piss*',
  'pizda',
  'poontsee',
  'poop',
  'porn',
  'p0rn',
  'pr0n',
  'preteen',
  'pula',
  'pule',
  'puta',
  'puto',
  'qahbeh',
  'queef*',
  'rautenberg',
  'schaffer',
  'scheiss*',
  'schlampe',
  'schmuck',
  'screw',
  'sharmuta',
  'sharmute',
  'shipal',
  'shiz',
  'skribz',
  'skurwysyn',
  'sphencter',
  'spic',
  'spierdalaj',
  'splooge',
  'suka',
  'b00b*',
  'testicle*',
  'titt*',
  'twat',
  'vittu',
  'wank*',
  'wetback*',
  'wichser',
  'wop*',
  'yed',
  'zabourah',
];

const reservedNames = [
  'pager',
  'pager-community',
  'community',
  'admin',
  'administrator',
  'root',
  'api',
  'www',
  'mail',
  'ftp',
];

const commonBypassPatterns = [
  /(.)\1{3,}/g, // Only remove 3+ repeated characters (asss -> ass, but keep "book", "glass")
];

const leetSpeakMap: Record<string, string> = {
  '0': 'o',
  '1': 'i',
  '3': 'e',
  '4': 'a',
  '5': 's',
  '7': 't',
  '@': 'a',
  $: 's',
  '!': 'i',
};

const normalizeText = (text: string): string => {
  let normalized = text.toLowerCase().trim();

  // Convert leet speak
  Object.entries(leetSpeakMap).forEach(([leet, normal]) => {
    normalized = normalized.replace(new RegExp(leet, 'g'), normal);
  });

  // Apply bypass pattern removals
  commonBypassPatterns.forEach((pattern) => {
    if (pattern.global) {
      normalized = normalized.replace(pattern, '');
    } else {
      normalized = normalized.replace(pattern, '');
    }
  });

  // Handle Unicode normalization
  normalized = normalized.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

  return normalized;
};

const checkWordBoundaries = (text: string, badWord: string): boolean => {
  // Escape special regex characters
  const escaped = badWord.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  // Only check whole word matches, not substrings
  const regex = new RegExp(`\\b${escaped}\\b`, 'i');
  return regex.test(text);
};

const profanitySet = new Set(localList.map((word) => word.toLowerCase().trim()));
const reservedSet = new Set(reservedNames.map((name) => name.toLowerCase().trim()));

export const isNameAllowed = (name: string): boolean => {
  if (!name || name.trim().length === 0) {
    return false;
  }

  const originalLower = name.toLowerCase().trim();
  const normalized = normalizeText(name);

  // Check reserved names (exact match)
  if (reservedSet.has(originalLower) || reservedSet.has(normalized)) {
    return false;
  }

  // Check against profanity list with word boundaries only
  for (const badWord of profanitySet) {
    if (
      checkWordBoundaries(originalLower, badWord) ||
      checkWordBoundaries(normalized, badWord)
    ) {
      return false;
    }
  }

  return true;
};

const systemReservedNames = [
  // Technical terms
  'admin',
  'administrator',
  'root',
  'system',
  'null',
  'undefined',
  'api',
  'www',
  'mail',
  'ftp',
  'smtp',
  'pop',
  'imap',

  // Common platforms
  'support',
  'help',
  'billing',
  'sales',
  'info',
  'contact',
  'news',
  'blog',
  'forum',
  'chat',
  'app',
  'mobile',

  // Potentially confusing
  'test',
  'demo',
  'example',
  'sample',
  'default',
  'guest',
  'anonymous',
  'public',
  'private',

  'pager',
  'pager-community',
  'community',
];

export const isNameAllowedComprehensive = (name: string): boolean => {
  if (!name || name.trim().length === 0) {
    return false;
  }

  const originalLower = name.toLowerCase().trim();
  const normalized = normalizeText(name);

  // Check system reserved names
  const systemReservedSet = new Set(systemReservedNames.map((n) => n.toLowerCase()));
  if (systemReservedSet.has(originalLower) || systemReservedSet.has(normalized)) {
    return false;
  }

  // Check against profanity list with word boundaries only
  for (const badWord of profanitySet) {
    if (
      checkWordBoundaries(originalLower, badWord) ||
      checkWordBoundaries(normalized, badWord)
    ) {
      return false;
    }
  }

  return true;
};
